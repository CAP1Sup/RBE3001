% Auto-generated by cameraCalibrator app on 17-Feb-2024
%-------------------------------------------------------

% Get the file path of this file
% https://www.mathworks.com/matlabcentral/answers/81148-get-path-from-running-script#answer_1110083
scriptFilePath = mfilename('fullpath');
if contains(scriptFilePath,'LiveEditorEvaluationHelper')
    scriptFilePath = matlab.desktop.editor.getActiveFilename;
end

% Strip the name of the script off of the path
filePath = erase(scriptFilePath, "/camcalib");

% Define images to process
imageFileNames = {'/images/Image1.png',...
    '/images/Image2.png',...
    '/images/Image5.png',...
    '/images/Image7.png',...
    '/images/Image8.png',...
    '/images/Image10.png',...
    '/images/Image14.png',...
    '/images/Image15.png',...
    '/images/Image16.png',...
    '/images/Image17.png',...
    '/images/Image18.png',...
    '/images/Image19.png',...
    '/images/Image20.png',...
    '/images/Image21.png',...
    '/images/Image22.png',...
    '/images/Image25.png',...
    '/images/Image26.png',...
    '/images/Image27.png',...
    '/images/Image28.png',...
    '/images/Image29.png',...
    '/images/Image30.png',...
    '/images/Image31.png',...
    '/images/Image32.png',...
    '/images/Image36.png',...
    '/images/Image37.png',...
    '/images/Image40.png',...
    };

% Build the full image paths
for index = 1:length(imageFileNames)
    imageFileNames{index} = strcat(filePath, imageFileNames{index});
end % 1:length(baseImageFileNames)

% Detect calibration pattern in images
detector = vision.calibration.monocular.CheckerboardDetector();
[imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames, 'HighDistortion', true);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates for the planar pattern keypoints
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);

% Calibrate the camera using fisheye parameters
[cameraParams, imagesUsed, estimationErrors] = estimateFisheyeParameters(imagePoints, worldPoints, ...
    [mrows, ncols], ...
    'EstimateAlignment', false, ...
    'WorldUnits', 'millimeters');

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortFisheyeImage(originalImage, cameraParams.Intrinsics);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
